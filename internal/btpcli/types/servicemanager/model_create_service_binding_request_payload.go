/*
 * Service Manager
 *
 * Service Manager provides REST APIs that are responsible for the creation and consumption of service instances in any connected runtime environment.   Use the Service Manager APIs to perform various operations related to your platforms, service brokers, service instances, and service bindings.  Get service plans and service offerings associated with your environment.    #### Platforms   Platforms are OSBAPI-enabled software systems on which applications and services are hosted.   With the Service Manager, you can now register your platform and enable it to consume the SAP BTP services from your native environment.   This registration results in a returned set of credentials that are needed to deploy the Service Manager agent.     #### Service Brokers   Service brokers act as brokers between the Service Manager and a platform’s marketplace to advertise catalogues of service offerings and service plans.  They also receive and process the requests from the marketplace to provision, bind, unbind, and deprovision these offerings and plans.    #### Service Instances   Service instances are instantiations of service plans that make the functionality of those service plans available for consumption.    #### Service Bindings   Service bindings provide access details to existing service instances.  The access details are part of the service bindings' ‘credentials’ property, and typically include access URLs and credentials.    #### Service Plans   Service plans represent sets of capabilities provided by a service offering.  For example, database service offerings provide different plans for different database versions or sizes, while the Service Manager plans offer different data access levels.    #### Service Offerings   Service offerings are advertisements of the services that are supported by a service broker.  For example, software that you can consume in the subaccount.  Service offerings are related to one or more service plans.
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package servicemanager

type CreateServiceBindingRequestPayload struct {
	// The name of the service binding.
	Name string `json:"name"`
	// The id of the service instance associated with the binding.
	ServiceInstanceId string `json:"service_instance_id"`
	// Some services support providing of additional configuration parameters during binding creation. Pass these parameters as key-value pairs.<br> For the list of supported configuration parameters, see the documentation of a particular service offering.<br>You can also use the *GET /v1/service_bindings/{serviceBindingID}/parameters* API later to view the parameters defined during this step.
	Parameters map[string]string `json:"parameters,omitempty"`
	// The bind_resource object contains platform-specific information related to the context in which the service is used.<br> The examples of some common fields to use: <br> app_guid - A string GUID of an application associated with the binding. For credentials bindings. Must be unique within the scope of the platform.<br>app_guid - Represents the scope to which the binding applies within the platform. <br>For example, in Kubernetes it can map to a namespace.<br> The scope of what the platform maps the app_guid to is platform-specific and can vary across binding requests.<br>route - URL of the intermediate application. For route services bindings.
	BindResource *interface{}         `json:"bind_resource,omitempty"`
	Labels       *map[string][]string `json:"labels,omitempty"`
}
