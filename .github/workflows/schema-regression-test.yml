name: Regression Test - Terraform Provider

# Idea: 
# 1. Setup infrastructure with stable release of the provider in the live environment
# 2. Switch to a local build of the provider
# 3. Execute a terraform plan and check for deviations
# 4. Destroy the infrastructure
# 5. If deviation was detected create/update an issue

on:
  workflow_dispatch:
  workflow_call:

env:
  PATH_TO_TFSCRIPT: 'regression-test'
  DEV_OVERRIDE: 'assets/provider-config-ghaction.txt'
  TEMP_PLAN_OUTPUT : 'plan-output.txt'
  MATCH_STRING : 'No changes. Your infrastructure matches the configuration.'


jobs:
  execute_regression_test:
    name: Regression Test
    runs-on: ubuntu-latest

    steps:
    - name: Check out Git repository
      id: checkout_repo
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      id : setup_terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false
        terraform_version: latest

    - name: Terraform Init with stable provider
      id: terraform_init
      shell: bash
      run: |
        terraform -chdir=${{ env.PATH_TO_TFSCRIPT }} init -no-color

    - name: Terraform Apply with stable provider
      id: terraform_apply
      shell: bash
      run: |
        export BTP_USERNAME=${{ secrets.BTP_USERNAME }}
        export BTP_PASSWORD=${{ secrets.BTP_PASSWORD }}
        terraform -chdir=${{ env.PATH_TO_TFSCRIPT }} apply -var globalaccount='${{ secrets.GLOBALACCOUNT }}' -auto-approve -no-color 

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '^1.21.3'

    - name: Install local Terraform provider
      id: build_provider
      shell: bash
      run: |
        go mod tidy && make install

    - name: Remove init data and place override
      id: set_to_override
      shell: bash
      run: |
        rm -rf .terraform && rm -rf .terraform.lock.hcl && cp ${{ env.DEV_OVERRIDE }} ~/.terraformrc

    - name: Check for deviations in terraform plan
      id: execute_deviation_check
      shell: bash
      run: |
        export BTP_USERNAME=${{ secrets.BTP_USERNAME }}
        export BTP_PASSWORD=${{ secrets.BTP_PASSWORD }}
        terraform -chdir=${{ env.PATH_TO_TFSCRIPT }} plan -var globalaccount=${{ secrets.GLOBALACCOUNT }} -no-color > ${{ env.TEMP_PLAN_OUTPUT }}
        if grep -Fxq "${{ env.MATCH_STRING }}" ${{ env.TEMP_PLAN_OUTPUT }}; then
          echo "No Deviations found"
          echo "SCHEMA_DEVIATIONS_FOUND=false" >> "$GITHUB_OUTPUT"
        else
          echo "Schema deviations found"
          echo "SCHEMA_DEVIATIONS_FOUND=true" >> "$GITHUB_OUTPUT"
        fi

    - name: Remove init data and override
      if: always()
      id: remove_override
      shell: bash
      run: |
        rm -rf .terraform && rm -rf .terraform.lock.hcl && rm -rf ~/.terraformrc

    - name: Terraform Init with stable provider
      if: always()
      id: terraform_reinit
      shell: bash
      run: |
        terraform -chdir=${{ env.PATH_TO_TFSCRIPT }} init -upgrade -no-color

    - name: Terraform Destroy with stable provider
      if: always()  
      id: terraform_destroy
      shell: bash
      run: |
        export BTP_USERNAME=${{ secrets.BTP_USERNAME }}
        export BTP_PASSWORD=${{ secrets.BTP_PASSWORD }}
        terraform -chdir=${{ env.PATH_TO_TFSCRIPT }} destroy -var globalaccount='${{ secrets.GLOBALACCOUNT }}' -auto-approve -no-color

    - name: State deviation - find existing issue for deviation
      id: find_deviation_issue
      uses: micalevisk/last-issue-action@v2
      if: ${{ steps.execute_deviation_check.outputs.SCHEMA_DEVIATIONS_FOUND == 'true'}}
      with: 
        state: open
        labels: |
          state deviation
          automated issue

    - name: State deviation - create or update issue
      uses: peter-evans/create-issue-from-file@v4
      if: ${{ steps.execute_deviation_check.outputs.SCHEMA_DEVIATIONS_FOUND == 'true'}}
      with:
        title: State deviation found
        # If issue number is empty a new issue gets created
        issue-number: ${{ steps.find_deviation_issue.outputs.issue-number }}
        content-filepath: ${{ env.TEMP_PLAN_OUTPUT }}
        labels: state deviation, automated issue

    - name: Cleanup plan output
      id: execute_plan_cleanup
      if: always() 
      shell: bash
      run: |
        rm -rf ${{ env.TEMP_PLAN_OUTPUT }}

    - name: State deviation - Set run to failed
      if: ${{ steps.execute_deviation_check.outputs.SCHEMA_DEVIATIONS_FOUND == 'true'}}
      uses: actions/github-script@v7
      with:
        script: |
            core.setFailed('A state deviation was detected!')